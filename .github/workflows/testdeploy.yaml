name: Test playground

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  git_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semvar.outputs.version_tag }}
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Git Version
      id: semvar
      uses: paulhatch/semantic-version@v4.0.3
      with:
        format: "${major}.${minor}.${patch}"
        namespace: vigil

  playing:
    runs-on: ubuntu-latest
    needs: git_version
    env:
      DEPLOY_FILE: ./README
      APP: ENCODED_ENV
      PROJECT: black

    steps:
    - name: Checkout Main Branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

      - name: 'Replace variables in deployment script'
        uses: cschleiden/replace-tokens@v1
        with:
          files: "[app1/README, app2/README]"
        env:
          CHANGE_HERE: this_is_the_greatest_or_something

    # - name: Create env file from secrets
    #   run: echo "${{ secrets.TEST_PROJ }}" > .env.${{ env.APP }}.${{ env.PROJECT }}

    # - name: Decode base64 secret
    #   id: write_file
    #   uses: timheuer/base64-to-file@v1.1
    #   with:
    #     fileName: '.env.${{ env.PROJECT }}.staging'
    #     fileDir: './'
    #     encodedString: ${{ secrets[env.APP] }}

    # - name: Decode private key
    #   run: echo "FIREBASE_PRIVATE_KEY=\"$(echo ${{ secrets.BASE64_THING }} | base64 -d)"\" >> $GITHUB_ENV

    # - name: 'Replace variables in deployment script'
    #   uses: datamonsters/replace-action@v2
    #   with:
    #     files: READMESED
    #     replacements: $TEST=${{ env.FIREBASE_PRIVATE_KEY }}

    # - name: cat env
    #   run: cat .env.black.staging

    # - name: Encode Nginx Conf
    #   run: |
    #     sed -i "s/\$TEST/${{ secrets.TEST }}/g" READMESED
    #     cat READMESED
    # - name: Git Version
    #   id: semvar
    #   uses: paulhatch/semantic-version@v4.0.3
    #   with:
    #     format: "${major}.${minor}.${patch}"

    # - name: Git Version
    #   id: semvar2
    #   uses: paulhatch/semantic-version@v4.0.3
    #   with:
    #     change_path: app2/
    #     namespace: app2
    #     format: "${major}.${minor}.${patch}"

    # - name: Print version
    #   run:
    #     echo ${{ needs.git_version.outputs.version }}

    # - name: Print version 2
    #   run:
    #     echo ${{ steps.semvar2.outputs.version }} ${{ steps.semvar2.outputs.version_tag }} ${{ steps.semvar2.outputs.changed }}

    # - name: package-version-to-git-tag-app1
    #   uses: pkgdeps/git-tag-action@v2
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     github_repo: ${{ github.repository }}
    #     git_commit_sha: ${{ github.sha }}
    #     version: "${{ needs.git_version.outputs.version }}"

    # - name: Git Version again
    #   id: semvara
    #   uses: paulhatch/semantic-version@v4.0.3
    #   with:
    #     format: "${major}.${minor}.${patch}"

    # - name: package-version-to-git-tag-app2
    #   uses: pkgdeps/git-tag-action@v2
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     github_repo: ${{ github.repository }}
    #     git_commit_sha: ${{ github.sha }}
    #     version: "${{ steps.semvar2.outputs.version_tag }}"

    # - name: Merge development -> staging
    #   uses: devmasx/merge-branch@master
    #   with:
    #     type: now
    #     from_branch: master
    #     target_branch: staging
    #     github_token: ${{ github.token }}
    # - uses: everlytic/branch-merge@1.1.2
    #   with:
    #     github_token: ${{ github.token }}
    #     source_ref: master
    #     target_branch: staging
  another:
    runs-on: ubuntu-latest
    needs: [git_version, playing]
    steps:

    - name: Print version
      run:
        echo ${{ needs.git_version.outputs.version }}